#!/usr/bin/env python
import gzip
import sys
import subprocess

import click

from lxml import etree
from lxml.etree import tostring as etree2string
from simplejson import dumps as jdumps
from simplejson import dump as jdump
from xmltodict import parse as x2dparse
from xmljson import badgerfish as bf
from xmljson import gdata as gd
from xmljson import cobra as ca


@click.group()
def discogs():
    pass


@discogs.group()
def convert():
    pass


@convert.command()
@click.option("-o", "--outfile", type=click.File("w"), default=sys.stdout)
@click.argument("in_files", nargs=-1, type=click.File("r"))
def artists(outfile, in_files):
    process_xml_files(outfile, in_files, "artist")


@convert.command()
@click.option("-o", "--outfile", type=click.File("w"), default=sys.stdout)
@click.argument("in_files", nargs=-1, type=click.File("rb"))
def labels(outfile, in_files):
    process_xml_files(outfile, in_files, "label")


def process_xml_files(out_file, in_files, tag):
    for i_file, in_file in enumerate(in_files, 1):
        click.echo("{}".format(in_file.name), err=True)
        in_fname = getattr(in_file, "name", "Unknown")
        if in_fname.endswith(".gz"):
            res = process_xml(gzip.GzipFile(fileobj=in_file), out_file, "label")
        else:
            res = process_xml(in_file, out_file, "label")

        click.echo(
            "File {}, {}: processed {} label records".format(i_file, in_fname, res)
        )


def process_xml(in_file, out_file, tag):
    context = etree.iterparse(in_file, events=("end",), tag=tag)

    for i, (event, el) in enumerate(context, 1):
        res = jdumps(bf.data(el))
        out_file.write(res)
        out_file.write("\n")

        el.clear()
        while el.getprevious() is not None:
            del el.getparent()[0]

    del context
    return i


@discogs.group()
def clean():
    pass


@clean.command()
@click.option(
    "--emit-status", type=click.Choice(["all", "valid", "invalid"]), default="all"
)
@click.option("--verbose / --quiet", default=True)
@click.argument(
    "in_file_paths",
    nargs=-1,
    type=click.Path(exists=True, dir_okay=False, readable=True),
)
def xml_check(in_file_paths, emit_status, verbose):
    i, valid_count, invalid_count = 0, 0, 0

    for i, in_path in enumerate(in_file_paths, 1):
        res = subprocess.run(
            ["xmllint", "--noout", "--stream", in_path], capture_output=True
        )
        if res.returncode == 0:
            valid_count += 1
            if emit_status in ("all", "valid"):
                click.echo("Valid {}".format(in_path))
        else:
            invalid_count += 1
            if emit_status in ("all", "invalid"):
                click.echo("Invalid {}".format(in_path))

        if verbose and (res.returncode != 0):
            click.echo(res.stderr, err=True)

    if verbose:
        click.echo(
            "Processed: {}, valid: {}, invalid: {}".format(
                i, valid_count, invalid_count
            )
        )


if __name__ == "__main__":
    discogs()
